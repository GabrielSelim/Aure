# üöÄ Docker Compose - Sistema Aure
# Deploy seguro para produ√ß√£o (n√£o afeta outros containers)
# Verificar portas: ./check-ports.sh
# Deploy: docker-compose up -d

version: '3.8'

services:
  # üóÑÔ∏è Banco de Dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: aure-postgres-${COMPOSE_PROJECT_NAME:-aure}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aure_production}
      POSTGRES_USER: ${POSTGRES_USER:-aure_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aure_secure_password_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432"  # Configur√°vel via .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aure-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aure_user} -d ${POSTGRES_DB:-aure_production}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # üîß Redis (Cache e Sessions)
  redis:
    image: redis:7-alpine
    container_name: aure-redis-${COMPOSE_PROJECT_NAME:-aure}
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "127.0.0.1:${REDIS_PORT:-6379}:6379"  # Configur√°vel via .env
    volumes:
      - redis_data:/data
    networks:
      - aure-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üåê API Backend .NET 8
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aure-api-${COMPOSE_PROJECT_NAME:-aure}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # üîó Connection Strings
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB:-aure_production};Username=${POSTGRES_USER:-aure_user};Password=${POSTGRES_PASSWORD:-aure_secure_password_2024};Include Error Detail=true;Pooling=true;MinPoolSize=10;MaxPoolSize=100;
      
      # üîê JWT Settings
      - JwtSettings__SecretKey=${JWT_SECRET_KEY:-aure-production-jwt-key-2024-fintech-system-very-secure-256-bits}
      - JwtSettings__Issuer=Aure.API
      - JwtSettings__Audience=Aure.WebApp
      - JwtSettings__ExpirationMinutes=30
      
      # üìß Email Settings (Gmail SMTP)
      - EmailSettings__SmtpHost=smtp.gmail.com
      - EmailSettings__SmtpPort=587
      - EmailSettings__UseSsl=false
      - EmailSettings__Username=${EMAIL_USERNAME:-aurecontroll@gmail.com}
      - EmailSettings__Password=${EMAIL_PASSWORD:-wotorcxxfepwxvvu}
      - EmailSettings__FromEmail=${EMAIL_USERNAME:-aurecontroll@gmail.com}
      - EmailSettings__FromName=Sistema Aure
      - EmailSettings__BaseUrl=${API_BASE_URL:-https://aureapi.gabrielsanztech.com.br}
      
      # üîí Encryption
      - Encryption__Key=f48FY/bCB30hhqFSNJqA0aqon4J6DCuuFsC45DACo9Y=
      - Encryption__IV=JaVlaN8G35TVrboxruaZyA==
      
      # üåê Base URL
      - BaseUrl=${API_BASE_URL:-https://aureapi.gabrielsanztech.com.br}
      
      # üõ†Ô∏è Environment (detecta automaticamente)
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5000
      - TZ=America/Sao_Paulo
      - ASPNETCORE_HOSTFILTERING__ALLOWEDHOSTS__0=*
      
      # üìù Logging
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
      - Logging__LogLevel__Microsoft.EntityFrameworkCore=Information
      
      # üîç Serilog
      - Serilog__MinimumLevel__Default=Information
      - Serilog__WriteTo__0__Name=Console
      - Serilog__WriteTo__1__Name=File
      - Serilog__WriteTo__1__Args__path=./logs/aure-.log
      - Serilog__WriteTo__1__Args__rollingInterval=Day
      - Serilog__WriteTo__1__Args__retainedFileCountLimit=30
    ports:
      - "${API_PORT:-5000}:5000"  # Configur√°vel via .env
    volumes:
      - ./logs:/app/logs
      - ./src/Aure.Infrastructure/Templates:/app/Templates:ro
    networks:
      - aure-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # üìä Adminer (Administra√ß√£o de Banco)
  adminer:
    image: adminer:latest
    container_name: aure-adminer-${COMPOSE_PROJECT_NAME:-aure}
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "127.0.0.1:${ADMINER_PORT:-8080}:8080"  # Configur√°vel via .env
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=dracula
    networks:
      - aure-network
    profiles:
      - dev  # S√≥ ativa no profile dev: docker-compose --profile dev up -d

  # üåê Frontend React/Next.js (quando estiver pronto)
  # frontend:
  #   build:
  #     context: ./aure-frontend
  #     dockerfile: Dockerfile
  #   container_name: aure-frontend
  #   restart: unless-stopped
  #   depends_on:
  #     - api
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://localhost:5203/api
  #     - NODE_ENV=production
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - aure-network

  # üîÑ Nginx (Reverse Proxy - Produ√ß√£o)
  # nginx:
  #   image: nginx:alpine
  #   container_name: aure-nginx
  #   restart: unless-stopped
  #   depends_on:
  #     - api
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - aure-network

# üìÇ Volumes Persistentes
volumes:
  postgres_data:
    name: aure-postgres-data-${COMPOSE_PROJECT_NAME:-aure}
    driver: local
  
  redis_data:
    name: aure-redis-data-${COMPOSE_PROJECT_NAME:-aure}
    driver: local

# üåê Networks
networks:
  aure-network:
    name: aure-network-${COMPOSE_PROJECT_NAME:-aure}
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}