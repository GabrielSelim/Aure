// <auto-generated />
using System;
using Aure.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aure.Infrastructure.Migrations
{
    [DbContext(typeof(AureDbContext))]
    [Migration("20251030193120_AdicionarTokenRecuperacaoSenha")]
    partial class AdicionarTokenRecuperacaoSenha
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aure.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_name");

                    b.Property<string>("HashChain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash_chain");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PerformedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("performed_by");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PerformedBy");

                    b.ToTable("auditlogs");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("BusinessModel")
                        .HasColumnType("integer")
                        .HasColumnName("business_model");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("cnpj");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KycStatus")
                        .HasColumnType("integer")
                        .HasColumnName("kyc_status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("idx_companies_cnpj");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_companies_created_at");

                    b.HasIndex("KycStatus")
                        .HasDatabaseName("idx_companies_kyc_status");

                    b.HasIndex("Type")
                        .HasDatabaseName("idx_companies_type");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("Aure.Domain.Entities.CompanyRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("ProviderCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_company_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProviderCompanyId");

                    b.HasIndex("ClientCompanyId", "ProviderCompanyId", "Type")
                        .IsUnique()
                        .HasFilter("is_deleted = false");

                    b.ToTable("companyrelationships");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("IpfsCid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ipfs_cid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal?>("MonthlyValue")
                        .HasColumnType("numeric")
                        .HasColumnName("monthly_value");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<string>("Sha256Hash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sha256_hash");

                    b.Property<DateTime?>("SignedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("signed_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("ValueTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("value_total");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("idx_contracts_client_id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_contracts_created_at");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("idx_contracts_provider_id");

                    b.HasIndex("Sha256Hash")
                        .IsUnique()
                        .HasDatabaseName("idx_contracts_sha256_hash");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_contracts_status");

                    b.ToTable("contracts");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccessKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_key");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issue_date");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<string>("PdfUrl")
                        .HasColumnType("text")
                        .HasColumnName("pdf_url");

                    b.Property<string>("SefazProtocol")
                        .HasColumnType("text")
                        .HasColumnName("sefaz_protocol");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("series");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("XmlContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("xml_content");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("PaymentId");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("Aure.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ItemSequence")
                        .HasColumnType("integer")
                        .HasColumnName("item_sequence");

                    b.Property<string>("NcmCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ncm_code");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<string>("TaxClassification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tax_classification");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric")
                        .HasColumnName("total_value");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_value");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("invoiceitems");
                });

            modelBuilder.Entity("Aure.Domain.Entities.KycRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DocumentHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_hash");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer")
                        .HasColumnName("document_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ProviderRef")
                        .HasColumnType("text")
                        .HasColumnName("provider_ref");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("kycrecords");
                });

            modelBuilder.Entity("Aure.Domain.Entities.LedgerEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric")
                        .HasColumnName("credit");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric")
                        .HasColumnName("debit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("PaymentId");

                    b.ToTable("ledgerentries");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipient_email");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("PaymentId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Aure.Domain.Entities.NotificationPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("ReceberEmailAlertasFinanceiros")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("receber_email_alertas_financeiros");

                    b.Property<bool>("ReceberEmailAtualizacoesSistema")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("receber_email_atualizacoes_sistema");

                    b.Property<bool>("ReceberEmailContratoAssinado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("receber_email_contrato_assinado");

                    b.Property<bool>("ReceberEmailContratoVencendo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("receber_email_contrato_vencendo");

                    b.Property<bool>("ReceberEmailNovoContrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("receber_email_novo_contrato");

                    b.Property<bool>("ReceberEmailNovoFuncionario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("receber_email_novo_funcionario");

                    b.Property<bool>("ReceberEmailPagamentoProcessado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("receber_email_pagamento_processado");

                    b.Property<bool>("ReceberEmailPagamentoRecebido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("receber_email_pagamento_recebido");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id1");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("is_deleted = false");

                    b.HasIndex("UserId1");

                    b.ToTable("notificationpreferences");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Method")
                        .HasColumnType("integer")
                        .HasColumnName("method");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractId")
                        .HasDatabaseName("idx_payments_contract_id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_payments_created_at");

                    b.HasIndex("Method")
                        .HasDatabaseName("idx_payments_method");

                    b.HasIndex("PaymentDate")
                        .HasDatabaseName("idx_payments_payment_date");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_payments_status");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JwtHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jwt_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Signature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Method")
                        .HasColumnType("integer")
                        .HasColumnName("method");

                    b.Property<string>("SignatureHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("signature_hash");

                    b.Property<DateTime>("SignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("signed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .HasDatabaseName("idx_signatures_contract_id");

                    b.HasIndex("SignedAt")
                        .HasDatabaseName("idx_signatures_signed_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_signatures_user_id");

                    b.HasIndex("ContractId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_signatures_contract_user_unique");

                    b.ToTable("signatures");
                });

            modelBuilder.Entity("Aure.Domain.Entities.SplitExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<Guid>("SplitId")
                        .HasColumnType("uuid")
                        .HasColumnName("split_id");

                    b.Property<Guid>("SplitRuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("split_rule_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TxHash")
                        .HasColumnType("text")
                        .HasColumnName("tx_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SplitRuleId");

                    b.ToTable("splitexecutions");
                });

            modelBuilder.Entity("Aure.Domain.Entities.SplitRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BeneficiaryRef")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("beneficiary_ref");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("FixedFee")
                        .HasColumnType("numeric")
                        .HasColumnName("fixed_fee");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("numeric")
                        .HasColumnName("percentage");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("splitrules");
                });

            modelBuilder.Entity("Aure.Domain.Entities.TaxCalculation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TaxBase")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_base");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_rate");

                    b.Property<int>("TaxType")
                        .HasColumnType("integer")
                        .HasColumnName("tax_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("taxcalculations");
                });

            modelBuilder.Entity("Aure.Domain.Entities.TokenizedAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer")
                        .HasColumnName("chain_id");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("TokenAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_address");

                    b.Property<string>("TxHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tx_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("tokenizedassets");
                });

            modelBuilder.Entity("Aure.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AceitouPoliticaPrivacidade")
                        .HasColumnType("boolean")
                        .HasColumnName("aceitou_politica_privacidade");

                    b.Property<bool>("AceitouTermosUso")
                        .HasColumnType("boolean")
                        .HasColumnName("aceitou_termos_uso");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("avatar_url");

                    b.Property<string>("CPFEncrypted")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("c_p_f_encrypted");

                    b.Property<string>("Cargo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cargo");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DataAceitePoliticaPrivacidade")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_aceite_politica_privacidade");

                    b.Property<DateTime?>("DataAceiteTermosUso")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_aceite_termos_uso");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("EnderecoBairro")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_bairro");

                    b.Property<string>("EnderecoCep")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("endereco_cep");

                    b.Property<string>("EnderecoCidade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_cidade");

                    b.Property<string>("EnderecoComplemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("endereco_complemento");

                    b.Property<string>("EnderecoEstado")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("endereco_estado");

                    b.Property<string>("EnderecoNumero")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("endereco_numero");

                    b.Property<string>("EnderecoPais")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("endereco_pais");

                    b.Property<string>("EnderecoRua")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("endereco_rua");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text")
                        .HasColumnName("password_reset_token");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_reset_token_expiry");

                    b.Property<string>("RGEncrypted")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("r_g_encrypted");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("TelefoneCelular")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("telefone_celular");

                    b.Property<string>("TelefoneFixo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("telefone_fixo");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VersaoPoliticaPrivacidadeAceita")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("versao_politica_privacidade_aceita");

                    b.Property<string>("VersaoTermosUsoAceita")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("versao_termos_uso_aceita");

                    b.HasKey("Id");

                    b.HasIndex("CPFEncrypted")
                        .IsUnique()
                        .HasFilter("cpf_encrypted IS NOT NULL AND is_deleted = false");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_users_created_at");

                    b.HasIndex("DataNascimento");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_users_email")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Role")
                        .HasDatabaseName("idx_users_role");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Aure.Domain.Entities.UserInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<Guid?>("AcceptedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("accepted_by_user_id");

                    b.Property<string>("Cargo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cargo");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("InvitationToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("invitation_token");

                    b.Property<Guid>("InvitedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("invited_by_user_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedByUserId");

                    b.HasIndex("Email");

                    b.HasIndex("InvitationToken")
                        .IsUnique();

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("CompanyId", "Status");

                    b.ToTable("userinvitations", (string)null);
                });

            modelBuilder.Entity("Aure.Domain.Entities.UserInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("BusinessModel")
                        .HasColumnType("integer")
                        .HasColumnName("business_model");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("cnpj");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("company_name");

                    b.Property<int?>("CompanyType")
                        .HasColumnType("integer")
                        .HasColumnName("company_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<int>("InviteType")
                        .HasColumnType("integer")
                        .HasColumnName("invite_type");

                    b.Property<Guid>("InvitedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("invited_by_user_id");

                    b.Property<string>("InviteeEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("invitee_email");

                    b.Property<string>("InviteeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("invitee_name");

                    b.Property<string>("InviterName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("inviter_name");

                    b.Property<bool>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_accepted");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("InviteeEmail");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("CompanyId", "IsAccepted", "IsDeleted");

                    b.ToTable("userinvites");
                });

            modelBuilder.Entity("Aure.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("Aure.Domain.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aure.Domain.Entities.CompanyRelationship", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Company", "ClientCompany")
                        .WithMany()
                        .HasForeignKey("ClientCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aure.Domain.Entities.Company", "ProviderCompany")
                        .WithMany()
                        .HasForeignKey("ProviderCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientCompany");

                    b.Navigation("ProviderCompany");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Contract", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Company", "Client")
                        .WithMany("ClientContracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aure.Domain.Entities.Company", "Provider")
                        .WithMany("ProviderContracts")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aure.Domain.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.Navigation("Contract");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Aure.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Aure.Domain.Entities.KycRecord", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Company", "Company")
                        .WithMany("KycRecords")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Aure.Domain.Entities.LedgerEntry", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aure.Domain.Entities.Payment", "Payment")
                        .WithMany("LedgerEntries")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Contract", "Contract")
                        .WithMany("Notifications")
                        .HasForeignKey("ContractId");

                    b.HasOne("Aure.Domain.Entities.Payment", "Payment")
                        .WithMany("Notifications")
                        .HasForeignKey("PaymentId");

                    b.Navigation("Contract");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Aure.Domain.Entities.NotificationPreferences", b =>
                {
                    b.HasOne("Aure.Domain.Entities.User", null)
                        .WithOne("NotificationPreferences")
                        .HasForeignKey("Aure.Domain.Entities.NotificationPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aure.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Company", null)
                        .WithMany("Payments")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Aure.Domain.Entities.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Session", b =>
                {
                    b.HasOne("Aure.Domain.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Signature", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Contract", "Contract")
                        .WithMany("Signatures")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aure.Domain.Entities.User", "User")
                        .WithMany("Signatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aure.Domain.Entities.SplitExecution", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Payment", "Payment")
                        .WithMany("SplitExecutions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aure.Domain.Entities.SplitRule", "SplitRule")
                        .WithMany("SplitExecutions")
                        .HasForeignKey("SplitRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("SplitRule");
                });

            modelBuilder.Entity("Aure.Domain.Entities.SplitRule", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Contract", "Contract")
                        .WithMany("SplitRules")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Aure.Domain.Entities.TaxCalculation", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Invoice", "Invoice")
                        .WithMany("TaxCalculations")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Aure.Domain.Entities.TokenizedAsset", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Contract", "Contract")
                        .WithOne("TokenizedAsset")
                        .HasForeignKey("Aure.Domain.Entities.TokenizedAsset", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Aure.Domain.Entities.User", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Aure.Domain.Entities.UserInvitation", b =>
                {
                    b.HasOne("Aure.Domain.Entities.User", "AcceptedByUser")
                        .WithMany()
                        .HasForeignKey("AcceptedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Aure.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aure.Domain.Entities.User", "InvitedByUser")
                        .WithMany()
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcceptedByUser");

                    b.Navigation("Company");

                    b.Navigation("InvitedByUser");
                });

            modelBuilder.Entity("Aure.Domain.Entities.UserInvite", b =>
                {
                    b.HasOne("Aure.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Aure.Domain.Entities.User", "InvitedByUser")
                        .WithMany()
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("InvitedByUser");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Company", b =>
                {
                    b.Navigation("ClientContracts");

                    b.Navigation("KycRecords");

                    b.Navigation("Payments");

                    b.Navigation("ProviderContracts");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Contract", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Signatures");

                    b.Navigation("SplitRules");

                    b.Navigation("TokenizedAsset");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("TaxCalculations");
                });

            modelBuilder.Entity("Aure.Domain.Entities.Payment", b =>
                {
                    b.Navigation("LedgerEntries");

                    b.Navigation("Notifications");

                    b.Navigation("SplitExecutions");
                });

            modelBuilder.Entity("Aure.Domain.Entities.SplitRule", b =>
                {
                    b.Navigation("SplitExecutions");
                });

            modelBuilder.Entity("Aure.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("Sessions");

                    b.Navigation("Signatures");
                });
#pragma warning restore 612, 618
        }
    }
}
